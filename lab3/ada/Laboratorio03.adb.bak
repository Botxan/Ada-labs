pragma Ada_2012;
package body Laboratorio03 is

   --------------------
   -- tipo_triangulo --
   --------------------

   function tipo_triangulo (A1, A2, A3 : in Float) return T_TRIANGULO is
      -- Datos: A1, A2 y A3 son los angulos (en grados) de un triangulo
      -- Pre: 0.0 < A1, A2, A3 <180.0

      -- Resultado: una variable de tipo T_TRIANGULO que puede ser equilatero, isosceles o escaleno
      -- Post: NO_TRIANGULO <--> no suman 180;
      --       EQUILATERO   <--> si son iguales
      --       ISOSCELES    <--> si dos iguales
      --       ESCALENOS    <--> si todos distintos
      triangulo_tipo: T_TRIANGULO;
   begin

      if (a1 > 0.0 or a2 > 0.0 or a1 > 0.0 ) and (a1 + a2 + a1 < 180.0) then
         if (a1 = a2 and a2 = a3 and a3 = 60.0) then
            triangulo_tipo := EQUILATERO;
         elsif(a1 + a2 = a3 or a1 + a3 = a2 or a2 + a3 = a1) then
            triangulo_tipo := ISOSCELES;
         else
            triangulo_tipo := ESCALENO;
         end if;
      else
         triangulo_tipo := NO_TRIANGULO;
      end if;

      return triangulo_tipo;

      end tipo_triangulo;

   -----------------------------
   -- Multiplos_de_tres_entre --
   -----------------------------

   procedure Multiplos_de_tres_entre (N1, N2 : in Integer; suma : out Natural)
   is
      -- Datos: 2 parametros, n1 y n2, Integers.
      -- Pre: N1 < N2

      -- Resultado: 1 parametro out, suma: Natural.
      -- post: Suma = suma de los multiplos de tres entre N1 y N2
   BEGIN

      suma := 0;

      if n1 >= 0 and n2 >= 0 then

      for i in n1..n2 loop
         if(i rem 3 = 0) then -- Sera multiplo de 3
            suma := suma + i;
         end if;
      end loop;

      else
         raise constraint_error with "Los numeros introducidos deben de ser naturales";
      end if;
      end Multiplos_de_tres_entre;

   -----------------
   -- sin_blancos --
   -----------------

   procedure sin_blancos is
   begin
      pragma Compile_Time_Warning (Standard.True, "sin_blancos unimplemented");
      raise Program_Error with "Unimplemented procedure sin_blancos";
   end sin_blancos;

   -------------------
   -- pares_impares --
   -------------------

   procedure pares_impares is
   begin
      pragma Compile_Time_Warning
        (Standard.True, "pares_impares unimplemented");
      raise Program_Error with "Unimplemented procedure pares_impares";
   end pares_impares;

   -----------------------
   -- secuencia_collatz --
   -----------------------

   procedure secuencia_collatz (N : in Integer; longitud, suma : out integer)
   is
   begin
      pragma Compile_Time_Warning
        (Standard.True, "secuencia_collatz unimplemented");
      raise Program_Error with "Unimplemented procedure secuencia_collatz";
   end secuencia_collatz;

   ------------------
   -- control_ISBN --
   ------------------

   function control_ISBN
     (d1, d2, d3, d4, d5, d6, d7, d8, d9 : in Integer) return character
   is
   begin
      pragma Compile_Time_Warning
        (Standard.True, "control_ISBN unimplemented");
      return raise Program_Error with "Unimplemented function control_ISBN";
   end control_ISBN;

   ------------------
   -- control_ISBN --
   ------------------

   function control_ISBN (num : in Integer) return character is
   begin
      pragma Compile_Time_Warning
        (Standard.True, "control_ISBN unimplemented");
      return raise Program_Error with "Unimplemented function control_ISBN";
   end control_ISBN;

end Laboratorio03;
